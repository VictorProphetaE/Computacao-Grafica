/*
Descrição: Modelo de avião com todos os pontos e mais se movimentando
Aluno: Victor Propheta Erbano

*/

#include <cmath>
#include <cstdlib>
#include <iostream>
#include <fstream>

#ifdef __APPLE__
#  include <GLUT/glut.h>
#  include <OpenGL/glext.h>
#else
#  include <GL/glut.h>
#  include <GL/glext.h>
#endif

#define PI 3.14159265358979324


using namespace std;

static GLUquadricObj *qobj; // Pointer to GLU quadric object.
// Begin globals.
// Initial control points.
/**Corpo avião*/
static float bico1[11][4][3] =
{
    {{0.5351, 0.1759, -0.0468}, {0.9244, 0.2444, -0.0468}, {1.3244, 0.2863, -0.0468}, {1.5420, 0.3033, -0.0468}},
    {{0.5351, 0.1759, 0.0468}, {0.9244, 0.2444, 0.0468}, {1.3244, 0.2863, 0.0468}, {1.5420, 0.3033, 0.0468}},
    {{0.5383, 0.1619, 0.1536}, {0.9233, 0.2210, 0.1847}, {1.3234, 0.2629, 0.2139}, {1.5559, 0.2847, 0.2352}},
    {{0.5418, 0.1372, 0.2918}, {0.9217, 0.1824, 0.3247}, {1.3214, 0.2161, 0.3601}, {1.6141, 0.2469, 0.3922}},
    {{0.5483, 0.0883, 0.3563}, {0.9189, 0.1199, 0.4081}, {1.3186, 0.1523, 0.4483}, {1.7069, 0.1971, 0.4882}},
    {{0.5557, 0.0126, 0.3965}, {0.9145, 0.0187, 0.4549}, {1.3130, 0.0247, 0.4951}, {1.7003, 0.0198, 0.5350}},
    {{0.5767, -0.2066, 0.3797}, {0.9009, -0.2939, 0.4549}, {1.2967, -0.3494, 0.4951}, {1.6833, -0.3675, 0.5350}},
    {{0.5864, -0.3087, 0.3573}, {0.8943, -0.4448, 0.4315}, {1.2904, -0.4929, 0.4717}, {1.6772, -0.5128, 0.5116}},
    {{0.5929, -0.4071, 0.2710}, {0.8894, -0.5574, 0.3368}, {1.2846, -0.6258, 0.3837}, {1.6717, -0.6381, 0.4201}},
    {{0.5970, -0.4501, 0.1456}, {0.8871, -0.6086, 0.1996}, {1.2830, -0.6705, 0.2444}, {1.6702, -0.6788, 0.2711}},
    {{0.5985, -0.4605, 0.0776}, {0.8863, -0.6276, 0.1133}, {1.2816, -0.6949, 0.1417}, {1.6687, -0.7075, 0.1521}},

};

static float bico2[11][4][3] =
{
    {{0.5985, -0.4605, 0.0776}, {0.8863, -0.6276, 0.1133}, {1.2816, -0.6949, 0.1417}, {1.6687, -0.7075, 0.1521}},
    {{0.5985, -0.4605, -0.0776}, {0.8863, -0.6276, -0.1133}, {1.2816, -0.6949, -0.1417}, {1.6687, -0.7075, -0.1521}},
    {{0.5970, -0.4501, -0.1456}, {0.8871, -0.6086, -0.1996}, {1.2830, -0.6705, -0.2444}, {1.6702, -0.6788, -0.2711}},
    {{0.5929, -0.4071, -0.2710}, {0.8894, -0.5574, -0.3368}, {1.2846, -0.6258, -0.3837}, {1.6717, -0.6381, -0.4201}},
    {{0.5864, -0.3087, -0.3573}, {0.8943, -0.4448, -0.4315}, {1.2904, -0.4929, -0.4717}, {1.6772, -0.5128, -0.5116}},
    {{0.5767, -0.2066, -0.3797}, {0.9009, -0.2939, -0.4549}, {1.2967, -0.3494, -0.4951}, {1.6833, -0.3675, -0.5350}},
    {{0.5557, 0.0126, -0.3965}, {0.9145, 0.0187, -0.4549}, {1.3130, 0.0247, -0.4951}, {1.7003, 0.0198, -0.5350}},
    {{0.5483, 0.0883, -0.3563}, {0.9189, 0.1199, -0.4081}, {1.3186, 0.1523, -0.4483}, {1.7069, 0.1971, -0.4882}},
    {{0.5418, 0.1372, -0.2918}, {0.9217, 0.1824, -0.3247}, {1.3214, 0.2161, -0.3601}, {1.6141, 0.2469, -0.3922}},
    {{0.5383, 0.1619, -0.1536}, {0.9233, 0.2210, -0.1847}, {1.3234, 0.2629, -0.2139}, {1.5559, 0.2847, -0.2352}},
    {{0.5351, 0.1759, -0.0468}, {0.9244, 0.2444, -0.0468}, {1.3244, 0.2863, -0.0468}, {1.5420, 0.3033, -0.0468}},
};

static float lateral_porta1[8][4][3] =
{
    {{1.6687, -0.7075, -0.1521}, {2.1322, -0.7188, -0.1567}, {2.9273, -0.6751, -0.1587}, {3.6795, -0.6050, -0.1577}},
    {{1.6687, -0.7075, 0.1521}, {2.1322, -0.7188, 0.1567}, {2.9273, -0.6751, 0.1587}, {3.6795, -0.6050, 0.1577}},
    {{1.6702, -0.6788, 0.2711}, {2.1337, -0.6847, 0.2870}, {2.9286, -0.6454, 0.2959}, {3.6810, -0.5708, 0.2867}},
    {{1.6717, -0.6381, 0.4201}, {2.1345, -0.6413, 0.4322}, {2.9307, -0.5979, 0.4327}, {3.6831, -0.5232, 0.4254}},
    {{1.6722, -0.5128, 0.5116}, {2.1427, -0.5178, 0.5210}, {2.9350, -0.4990, 0.5126}, {3.6866, -0.4311, 0.5056}},
    {{1.6833, -0.3675, 0.5350}, {2.1540, -0.3880, 0.5444}, {3.0610, -0.3844, 0.5461}, {3.6914, -0.3214, 0.5555}},
    {{1.7003, 0.0198, 0.5350}, {2.1950, 0.0025, 0.5486}, {3.0738, -0.0353, 0.5617}, {3.7029, -0.0588, 0.5555}},
    {{1.7069, 0.1971, 0.4882}, {1.8908, 0.1402, 0.5418}, {2.2126, 0.1134, 0.5486}, {3.0788, 0.0788, 0.5617}},
};

static float lateral_porta2[7][4][3] =
{
    {{1.7069, 0.1971, -0.4882}, {1.8908, 0.1402, -0.5418}, {2.2126, 0.1134, -0.5486}, {3.0788, 0.0788, -0.5617}},
    {{1.7003, 0.0198, -0.5350}, {2.1950, 0.0025, -0.5486}, {3.0738, -0.0353, -0.5617}, {3.7029, -0.0588, -0.5555}},
    {{1.6833, -0.3675, -0.5350}, {2.1540, -0.3880, -0.5444}, {3.0610, -0.3844, -0.5461}, {3.6914, -0.3214, -0.5555}},
    {{1.6722, -0.5128, -0.5116}, {2.1427, -0.5178, -0.5210}, {2.9350, -0.4990, -0.5126}, {3.6866, -0.4311, -0.5056}},
    {{1.6717, -0.6381, -0.4201}, {2.1345, -0.6413, -0.4322}, {2.9307, -0.5979, -0.4327}, {3.6831, -0.5232, -0.4254}},
    {{1.6702, -0.6788, -0.2711}, {2.1337, -0.6847, -0.2870}, {2.9286, -0.6454, -0.2959}, {3.6810, -0.5708, -0.2867}},
    {{1.6687, -0.7075, -0.1521}, {2.1322, -0.7188, -0.1567}, {2.9273, -0.6751, -0.1587}, {3.6795, -0.6050, -0.1577}},
};

static float lateral_traseiro1[7][3][3] =
{
    {{3.0788, 0.0788, 0.5617}, {3.6789, 0.0846, 0.5570}, {3.9475, 0.1342, 0.5156}},
    {{3.7029, -0.0588, 0.5555}, {4.6196, -0.0281, 0.4226}, {5.9565, -0.0199, 0.2574}},
    {{3.6914, -0.3214, 0.5555}, {4.6098, -0.2540, 0.4226}, {5.9501, -0.1670, 0.2574}},
    {{3.6866, -0.4311, 0.5056}, {4.6064, -0.3493, 0.3973}, {5.9476, -0.2295, 0.2408}},
    {{3.6831, -0.5232, 0.4254}, {4.6037, -0.4128, 0.3068}, {5.9455, -0.2787, 0.2078}},
    {{3.6810, -0.5708, 0.2867}, {4.6015, -0.4622, 0.2120}, {5.9433, -0.3278, 0.1404}},
    {{3.6795, -0.6050, 0.1577}, {4.6000, -0.4975, 0.1184}, {5.9413, -0.3550, 0.0670}},
};

static float lateral_traseiro2[8][3][3] =
{
    {{3.6795, -0.6050, 0.1577}, {4.6000, -0.4975, 0.1184}, {5.9413, -0.3550, 0.0670}},
    {{3.6795, -0.6050, -0.1577}, {4.6000, -0.4975, -0.1184}, {5.9413, -0.3550, -0.0670}},
    {{3.6810, -0.5708, -0.2867}, {4.6015, -0.4622, -0.2120}, {5.9433, -0.3278, -0.1404}},
    {{3.6831, -0.5232, -0.4254}, {4.6037, -0.4128, -0.3068}, {5.9455, -0.2787, -0.2078}},
    {{3.6866, -0.4311, -0.5056}, {4.6064, -0.3493, -0.3973}, {5.9476, -0.2295, -0.2408}},
    {{3.6914, -0.3214, -0.5555}, {4.6098, -0.2540, -0.4226}, {5.9501, -0.1670, -0.2574}},
    {{3.7029, -0.0588, -0.5555}, {4.6196, -0.0281, -0.4226}, {5.9565, -0.0199, -0.2574}},
    {{3.0788, 0.0788, -0.5617}, {3.6789, 0.0846, -0.5570}, {3.9475, 0.1342, -0.5156}},
};

static float lateral_sup1[3][3][3] =
{
    {{3.9475, 0.1342, 0.5156}, {4.0870, 0.2144, 0.4693}, {4.1980, 0.2381, 0.4115}},
    {{4.6363, 0.2085, 0.3765}, {4.6380, 0.2481, 0.3128}, {5.9645, 0.1632, 0.2410}},
    {{3.9475, 0.1342, 0.5156}, {4.6196, -0.0281, 0.4226}, {5.9565, -0.0199, 0.2574}},
};

static float lateral_sup2[3][3][3] =
{
    {{3.9475, 0.1342, -0.5156}, {4.0870, 0.2144, -0.4693}, {4.1980, 0.2381, -0.4115}},
    {{4.6363, 0.2085, -0.3765}, {4.6380, 0.2481, -0.3128}, {5.9645, 0.1632, -0.2410}},
    {{3.9475, 0.1342, -0.5156}, {4.6196, -0.0281, -0.4226}, {5.9565, -0.0199, -0.2574}},
};

static float sup1[3][3][3] =
{
    {{4.1980, 0.2381, 0.4115}, {4.2625, 0.2571, 0.3467}, {4.2995, 0.2864, 0.1936}},
    {{4.6363, 0.2085, 0.3765}, {4.6380, 0.2481, 0.3128}, {4.6401, 0.2739, 0.1801}},
    {{5.9645, 0.1632, 0.2410}, {5.9663, 0.2041, 0.2025}, {5.9664, 0.2203, 0.1322}},
};

static float sup2[3][3][3] =
{
    {{4.1980, 0.2381, -0.4115}, {4.2625, 0.2571, -0.3467}, {4.2995, 0.2864, -0.1936}},
    {{4.6363, 0.2085, -0.3765}, {4.6380, 0.2481, -0.3128}, {4.6401, 0.2739, -0.1801}},
    {{5.9645, 0.1632, -0.2410}, {5.9663, 0.2041, -0.2025}, {5.9664, 0.2203, -0.1322}},

};

static float sup_sup[2][5][3] =
{
    {{3.6789, 0.0846, 0.5570}, {3.9475, 0.1342, 0.5156}, {4.0870, 0.2144, 0.4693}, {4.1980, 0.2381, 0.4115}, {4.2625, 0.2571, 0.3467}},
    {{3.7029, -0.0588, 0.5555}, {4.6196, -0.0281, 0.4226}, {4.6363, 0.2085, 0.3765}, {4.6363, 0.2085, 0.3765}, {4.6380, 0.2481, 0.3128}},
};

static float traseira[11][4][3] =
{
    {{4.3225, 0.3039, -0.0311},{4.6408, 0.2900, -0.0362}, {5.9669, 0.2330, -0.0313}, {7.3244, 0.1728, -0.0265}},
    {{4.3225, 0.3039, 0.0311},{4.6408, 0.2900, 0.0362}, {5.9669, 0.2330, 0.0313}, {7.3244, 0.1728, 0.0265}},
    {{4.2995, 0.2864, 0.1936},{4.6401, 0.2739, 0.1801}, {5.9664, 0.2203, 0.1322}, {7.3178, 0.1670, 0.0508}},
    {{4.2625, 0.2571, 0.3467},{4.6380, 0.2481, 0.3128}, {5.9663, 0.2041, 0.2025}, {7.3087, 0.1548, 0.0735}},
    {{4.0870, 0.2144, 0.4963},{4.6363, 0.2085, 0.3765}, {5.9645, 0.1632, 0.2410}, {7.3045, 0.1062, 0.0869}},
    {{3.7029, -0.0588, 0.5555},{4.6196, -0.0281, 0.4226}, {5.9565, -0.0199, 0.2574}, {7.2971, -0.0146, 0.0869}},
    {{3.6914, -0.3214, 0.5555},{4.6098, -0.2540, 0.4226}, {5.9501, -0.1670, 0.2574}, {7.3007, -0.0784, 0.0869}},
    {{3.6866, -0.4311, 0.5056},{4.6064, -0.3493, 0.3973}, {5.9476, -0.2295, 0.2408}, {7.3016, -0.1060, 0.0821}},
    {{3.6831, -0.5232, 0.4254},{4.6037, -0.4128, 0.3068}, {5.9455, -0.2787, 0.2078}, {7.3025, -0.1336, 0.0724}},
    {{3.6810, -0.5708, 0.2867},{4.6015, -0.4622, 0.2120}, {5.9433, -0.3278, 0.1404}, {7.3032, -0.1654, 0.0444}},
    {{3.6795, -0.6050, 0.1577},{4.6000, -0.4975, 0.1184}, {5.9413, -0.3550, 0.0670}, {7.2825, -0.2027, 0.0025}},
};

static float traseira_espelho[11][4][3] =
{
    {{3.6795, -0.6050, 0.1577},{4.6000, -0.4975, 0.1184}, {5.9413, -0.3550, 0.0670}, {7.2825, -0.2027, 0.0025}},
    {{3.6795, -0.6050, -0.1577},{4.6000, -0.4975, -0.1184}, {5.9413, -0.3550, -0.0670}, {7.2825, -0.2027, -0.0025}},
    {{3.6810, -0.5708, -0.2867},{4.6015, -0.4622, -0.2120}, {5.9433, -0.3278, -0.1404}, {7.3032, -0.1654, -0.0444}},
    {{3.6831, -0.5232, -0.4254},{4.6037, -0.4128, -0.3068}, {5.9455, -0.2787, -0.2078}, {7.3025, -0.1336, -0.0724}},
    {{3.6866, -0.4311, -0.5056},{4.6064, -0.3493, -0.3973}, {5.9476, -0.2295, -0.2408}, {7.3016, -0.1060, -0.0821}},
    {{3.6914, -0.3214, -0.5555},{4.6098, -0.2540, -0.4226}, {5.9501, -0.1670, -0.2574}, {7.3007, -0.0784, -0.0869}},
    {{3.7029, -0.0588, -0.5555},{4.6196, -0.0281, -0.4226}, {5.9565, -0.0199, -0.2574}, {7.2971, -0.0146, -0.0869}},
    {{4.0870, 0.2144, -0.4963},{4.6363, 0.2085, -0.3765}, {5.9645, 0.1632, -0.2410}, {7.3045, 0.1062, -0.0869}},
    {{4.2625, 0.2571, -0.3467},{4.6380, 0.2481, -0.3128}, {5.9663, 0.2041, -0.2025}, {7.3087, 0.1548, -0.0735}},
    {{4.2995, 0.2864, -0.1936},{4.6401, 0.2739, -0.1801}, {5.9664, 0.2203, -0.1322}, {7.3178, 0.1670, -0.0508}},
    {{4.3225, 0.3039, -0.0311},{4.6408, 0.2900, -0.0362}, {5.9669, 0.2330, -0.0313}, {7.3244, 0.1728, -0.0265}},
};

/**profundor*/

static float profundor_sup[3][4][3] =
{
    {{6.4323, 0.0355, 0.1989}, {6.5279, 0.0782, 0.1872}, {6.7393, 0.0924, 0.1521}, {7.2304, 0.0709, 0.0936}},
    {{6.6661, 0.0253, 1.6266}, {6.7381, 0.0637, 1.6266}, {6.8557, 0.0756, 1.6266}, {7.2298, 0.0592, 1.6266}},
    {{6.6895, 0.0243, 1.6851}, {6.7724, 0.0441, 1.7085}, {6.9020, 0.0618, 1.7319}, {7.2293, 0.0476, 1.7202}},
};

static float profundor_sup1[2][5][3] =
{
    {{6.6661, 0.0253, 1.6266}, {6.7381, 0.0637, 1.6266}, {6.8557, 0.0756, 1.6266}, {7.2298, 0.0592, 1.6266}, {7.4738, 0.0134, 1.6266}},
    {{6.6895, 0.0243, 1.6851}, {6.7724, 0.0441, 1.7085}, {6.9020, 0.0618, 1.7319}, {7.2293, 0.0476, 1.7202}, {7.4396, 0.0032, 1.6898}},
};

static float profundor_infe[3][4][3] =
{
    {{6.4323, 0.0355, 0.1989}, {6.5243, -0.0037, 0.1872}, {6.7337, -0.0362, 0.1521}, {7.2258, -0.0343, 0.0936}},
    {{6.6661, 0.0253, 1.6266}, {6.7352, -0.0012, 1.6266}, {6.8511, -0.0296, 1.6266}, {7.2263, -0.0226, 1.6266}},
    {{6.6895, 0.0243, 1.6851}, {6.7703, -0.0027, 1.7085}, {6.8984, -0.0200, 1.7319}, {7.2263, -0.0226, 1.7202}},
};

static float profundor_infe1[2][5][3] =
{
    {{6.6661, 0.0253, 1.6266}, {6.7352, -0.0012, 1.6266}, {6.8511, -0.0296, 1.6266}, {7.2263, -0.0226, 1.6266}, {7.4723, -0.0216, 1.6266}},
    {{6.6895, 0.0243, 1.6851}, {6.7703, -0.0027, 1.7085}, {6.8984, -0.0200, 1.7319}, {7.2263, -0.0226, 1.7202}, {7.4386, -0.0202, 1.6898}},
};

static float profundor_fecha[2][6][3] =
{
    {{6.6895, 0.0243, 1.6851}, {6.7724, 0.0441, 1.7085}, {6.9020, 0.0618, 1.7319}, {7.2293, 0.0476, 1.7202}, {7.4396, 0.0032, 1.6898}, {7.4738, 0.0134, 1.6266}},
    {{6.6895, 0.0243, 1.6851}, {6.7703, -0.0027, 1.7085}, {6.8984, -0.0200, 1.7319}, {7.2263, -0.0226, 1.7202}, {7.4386, -0.0202, 1.6898}, {7.4723, -0.0216, 1.6266}},
};

/**profundo espelho*/

static float profundor_sup_espelho[3][4][3] =
{
    {{6.4323, 0.0355, -0.1989}, {6.5279, 0.0782, -0.1872}, {6.7393, 0.0924, -0.1521}, {7.2304, 0.0709, -0.0936}},
    {{6.6661, 0.0253, -1.6266}, {6.7381, 0.0637, -1.6266}, {6.8557, 0.0756, -1.6266}, {7.2298, 0.0592, -1.6266}},
    {{6.6895, 0.0243, -1.6851}, {6.7724, 0.0441, -1.7085}, {6.9020, 0.0618, -1.7319}, {7.2293, 0.0476, -1.7202}},
};

static float profundor_sup1_espelho[2][5][3] =
{
    {{6.6661, 0.0253, -1.6266}, {6.7381, 0.0637, -1.6266}, {6.8557, 0.0756, -1.6266}, {7.2298, 0.0592, -1.6266}, {7.4738, 0.0134, -1.6266}},
    {{6.6895, 0.0243, -1.6851}, {6.7724, 0.0441, -1.7085}, {6.9020, 0.0618, -1.7319}, {7.2293, 0.0476, -1.7202}, {7.4396, 0.0032, -1.6898}},
};

static float profundor_infe_espelho[3][4][3] =
{
    {{6.4323, 0.0355, -0.1989}, {6.5243, -0.0037, -0.1872}, {6.7337, -0.0362, -0.1521}, {7.2258, -0.0343, -0.0936}},
    {{6.6661, 0.0253, -1.6266}, {6.7352, -0.0012, -1.6266}, {6.8511, -0.0296, -1.6266}, {7.2263, -0.0226, -1.6266}},
    {{6.6895, 0.0243, -1.6851}, {6.7703, -0.0027, -1.7085}, {6.8984, -0.0200, -1.7319}, {7.2263, -0.0226, -1.7202}},
};

static float profundor_infe1_espelho[2][5][3] =
{
    {{6.6661, 0.0253, -1.6266}, {6.7352, -0.0012, -1.6266}, {6.8511, -0.0296, -1.6266}, {7.2263, -0.0226, -1.6266}, {7.4723, -0.0216, -1.6266}},
    {{6.6895, 0.0243, -1.6851}, {6.7703, -0.0027, -1.7085}, {6.8984, -0.0200, -1.7319}, {7.2263, -0.0226, -1.7202}, {7.4386, -0.0202, -1.6898}},
};

static float profundor_fecha_espelho[2][6][3] =
{
    {{6.6895, 0.0243, -1.6851}, {6.7724, 0.0441, -1.7085}, {6.9020, 0.0618, -1.7319}, {7.2293, 0.0476, -1.7202}, {7.4396, 0.0032, -1.6898}, {7.4738, 0.0134, -1.6266}},
    {{6.6895, 0.0243, -1.6851}, {6.7703, -0.0027, -1.7085}, {6.8984, -0.0200, -1.7319}, {7.2263, -0.0226, -1.7202}, {7.4386, -0.0202, -1.6898}, {7.4723, -0.0216, -1.6266}},
};

/**asa leme*/
static float asa_leme[4][4][3] =
{
    {{4.7915, 0.2835, 0.0000}, {5.0721, 0.2715, 0.0702}, {5.4112, 0.2571, 0.0819}, {7.3286, 0.1743, 0.0819}},
    {{6.5117, 0.5123, 0.0000}, {6.6042, 0.4848, 0.0585}, {6.8019, 0.4528, 0.0819}, {7.4683, 0.4237, 0.0819}},
    {{6.7633, 0.6419, 0.0000}, {6.8218, 0.6393, 0.0585}, {6.9738, 0.6327, 0.0819}, {7.5700, 0.6066, 0.0702}},
    {{7.6103, 1.5302, 0.0000}, {7.6571, 1.5282, 0.0351}, {7.7506, 1.5241, 0.0585}, {8.1014, 1.5088, 0.0468}},
};

/**asa leme espelho*/
static float asa_leme_espelho[4][4][3] =
{
    {{4.7915, 0.2835, 0.0000}, {5.0721, 0.2715, -0.0702}, {5.4112, 0.2571, -0.0819}, {7.3286, 0.1743, -0.0819}},
    {{6.5117, 0.5123, 0.0000}, {6.6042, 0.4848, -0.0585}, {6.8019, 0.4528, -0.0819}, {7.4683, 0.4237, -0.0819}},
    {{6.7633, 0.6419, 0.0000}, {6.8218, 0.6393, -0.0585}, {6.9738, 0.6327, -0.0819}, {7.5700, 0.6066, -0.0702}},
    {{7.6103, 1.5302, 0.0000}, {7.6571, 1.5282, -0.0351}, {7.7506, 1.5241, -0.0585}, {8.1014, 1.5088, -0.0468}},
};

/**asa leme fecha*/
static float asa_leme_fecha[2][6][3] =
{
    {{7.6103, 1.5302, 0.0000}, {7.6571, 1.5282, 0.0351}, {7.7506, 1.5241, 0.0585}, {8.1014, 1.5088, 0.0468}, {8.2300, 1.5032, 0.0351}, {8.3575, 1.4742, 0.0117}},
    {{7.6103, 1.5302, 0.0000}, {7.6571, 1.5282, -0.0351}, {7.7506, 1.5241, -0.0585}, {8.1014, 1.5088, -0.0468}, {8.2300, 1.5032, -0.0351}, {8.3575, 1.4742, -0.0117}},
};

/**profundor pro*/
static float profundor_pro[2][2][3] =
{
    {{7.2420, 0.0704, 0.0936}, {7.7193, 0.0027, 0.2457}},
    {{7.2415, 0.0587, 1.6149}, {7.4738, 0.0134, 1.6149}},
};

static float profundor_pro_inf[2][2][3] =
{
    {{7.2375, -0.0348, 0.0936}, {7.7178, -0.0323, 0.2457}},
    {{7.2380, -0.0231, 1.6149}, {7.4723, -0.0216, 1.6149}},
};

static float profundor_pro_fec[2][2][3] =
{
    {{7.7193, 0.0027, 0.2457}, {7.4738, 0.0134, 1.6149}},
    {{7.7178, -0.0323, 0.2457}, {7.4723, -0.0216, 1.6149}},
};

static float profundor_pro_fec2[2][2][3] =
{
    {{7.2420, 0.0704, 0.0936}, {7.7193, 0.0027, 0.2457}},
    {{7.2375, -0.0348, 0.0936}, {7.7178, -0.0323, 0.2457}},
};

/**profundor pro espelho*/
static float profundor_pro_espelho[2][2][3] =
{
    {{7.2420, 0.0704, -0.0936}, {7.7193, 0.0027, -0.2457}},
    {{7.2415, 0.0587, -1.6149}, {7.4738, 0.0134, -1.6149}},
};

static float profundor_pro_inf_espelho[2][2][3] =
{
    {{7.2375, -0.0348, -0.0936}, {7.7178, -0.0323, -0.2457}},
    {{7.2380, -0.0231, -1.6149}, {7.4723, -0.0216, -1.6149}},
};

static float profundor_pro_fec_espelho[2][2][3] =
{
    {{7.7193, 0.0027, -0.2457}, {7.4738, 0.0134, -1.6149}},
    {{7.7178, -0.0323, -0.2457}, {7.4723, -0.0216, -1.6149}},
};

static float profundor_pro_fec2_espelho[2][2][3] =
{
    {{7.2420, 0.0704, -0.0936}, {7.7193, 0.0027, -0.2457}},
    {{7.2375, -0.0348, -0.0936}, {7.7178, -0.0323, -0.2457}},
};

static float fundo_fecha[2][9][3] =
{
    {{7.2825, -0.2027, 0.0025}, {7.3032, -0.1654, 0.1654}, {7.3025, -0.1336, 0.0724}, {7.3016, -0.1060, 0.0821}, {7.3007, -0.0784, 0.0869}, {7.2971, -0.0146, 0.0869}, {7.3045, 0.1062, 0.0869}, {7.3087, 0.1548, 0.0735}, {7.3286, 0.1743, 0.0819}},
    {{7.2825, -0.2027, -0.0025}, {7.3032, -0.1654, -0.1654}, {7.3025, -0.1336, -0.0724}, {7.3016, -0.1060, -0.0821}, {7.3007, -0.0784, -0.0869}, {7.2971, -0.0146, -0.0869}, {7.3045, 0.1062, -0.0869}, {7.3087, 0.1548, -0.0735}, {7.3286, 0.1743, -0.0819}},
};


/**leme*/
static float leme[6][3][3] =
{
    {{8.1125, 1.4966, 0.0468}, {8.2295, 1.4915, 0.0351}, {8.3570, 1.4625, 0.0117}},
    {{7.5817, 0.6061, 0.0702}, {7.8389, 0.5949, 0.0585}, {8.0493, 0.5857, 0.0234}},
    {{7.4800, 0.4232, 0.0819}, {7.7606, 0.4109, 0.0468}, {7.9863, 0.4010, 0.0234}},
    {{7.3403, 0.1738, 0.0819}, {7.6793, 0.1590, 0.0468}, {7.9324, 0.1479, 0.0234}},
    {{7.3203, -0.0150, 0.0819}, {7.6726, 0.0048, 0.0468}, {7.9191, 0.0174, 0.0234}},
    {{7.3032, -0.1654, 0.0444}, {7.6670, -0.1238, 0.0468}, {7.8851, -0.0396, 0.0234}},
};

static float leme_espelho[6][3][3] =
{
    {{8.1125, 1.4966, -0.0468}, {8.2295, 1.4915, -0.0351}, {8.3570, 1.4625, -0.0117}},
    {{7.5817, 0.6061, -0.0702}, {7.8389, 0.5949, -0.0585}, {8.0493, 0.5857, -0.0234}},
    {{7.4800, 0.4232, -0.0819}, {7.7606, 0.4109, -0.0468}, {7.9863, 0.4010, -0.0234}},
    {{7.3403, 0.1738, -0.0819}, {7.6793, 0.1590, -0.0468}, {7.9324, 0.1479, -0.0234}},
    {{7.3203, -0.0150, -0.0819}, {7.6726, 0.0048, -0.0468}, {7.9191, 0.0174, -0.0234}},
    {{7.3032, -0.1654, -0.0444}, {7.6670, -0.1238, -0.0468}, {7.8851, -0.0396, -0.0234}},
};

static float leme_fecha[4][2][3] =
{
    {{7.3032, -0.1654, 0.0444}, {7.3032, -0.1654, -0.0444}},
    {{7.4540, -0.1731, 0.0468}, {7.4540, -0.1731, -0.0468}},
    {{7.6670, -0.1238, 0.0468}, {7.6670, -0.1238, -0.0468}},
    {{7.8851, -0.0396, 0.0234}, {7.8851, -0.0396, -0.0234}},

};

static float leme_fecha2[6][2][3] =
{
    {{7.8851, -0.0396, 0.0234}, {7.8851, -0.0396, -0.0234}},
    {{7.9191, 0.0174, 0.0234}, {7.9191, 0.0174, -0.0234}},
    {{7.9324, 0.1479, 0.0234}, {7.9324, 0.1479, -0.0234}},
    {{7.9863, 0.4010, 0.0234}, {7.9863, 0.4010, -0.0234}},
    {{8.0493, 0.5857, 0.0234}, {8.0493, 0.5857, -0.0234}},
    {{8.3570, 1.4625, 0.0117}, {8.3570, 1.4625, -0.0117}},
};


/**helice parte 1*/
static float helice_parte[4][4][3] =
{
    {{0.0000, 0.0000, 0.0000}, {0.0605, 0.0427, -0.0121}, {0.2383, 0.0915, -0.0272}, {0.4030, 0.1069, -0.0333}},
    {{0.0000, 0.0000, 0.0000}, {0.0605, 0.0427, 0.0121}, {0.2383, 0.0915, 0.0272}, {0.4030, 0.1069, 0.0333}},
    {{0.0000, 0.0000, 0.0000}, {0.0599, 0.0306, 0.0331}, {0.2371, 0.0643, 0.0745}, {0.4015, 0.0737, 0.0910}},
    {{0.0000, 0.0000, 0.0000}, {0.0590, 0.0096, 0.0452}, {0.2351, 0.0171, 0.1017}, {0.3990, 0.0160, 0.1243}},

};

static float helice_parte2[4][4][3] =
{
    {{0.0000, 0.0000, 0.0000}, {0.0590, 0.0096, 0.0452}, {0.2351, 0.0171, 0.1017}, {0.3990, 0.0160, 0.1243}},
    {{0.0000, 0.0000, 0.0000}, {0.0580, -0.0146, 0.0452}, {0.2327, -0.0374, 0.1017}, {0.3961, -0.0506, 0.1243}},
    {{0.0000, 0.0000, 0.0000}, {0.0571, -0.0355, 0.0331}, {0.2306, -0.0845, 0.0745}, {0.3936, -0.1082, 0.0910}},
    {{0.0000, 0.0000, 0.0000}, {0.0565, -0.0477, 0.0121}, {0.2294, -0.1118, 0.0272}, {0.3921, -0.1415, 0.0333}},
};

static float helice_parte3[4][4][3] =
{
    {{0.0000, 0.0000, 0.0000}, {0.0565, -0.0477, 0.0121}, {0.2294, -0.1118, 0.0272}, {0.3921, -0.1415, 0.0333}},
    {{0.0000, 0.0000, 0.0000}, {0.0565, -0.0477, -0.0121}, {0.2294, -0.1118, -0.0272}, {0.3921, -0.1415, -0.0333}},
    {{0.0000, 0.0000, 0.0000}, {0.0571, -0.0355, -0.0331}, {0.2306, -0.0845, -0.0745}, {0.3936, -0.1082, -0.0910}},
    {{0.0000, 0.0000, 0.0000}, {0.0580, -0.0146, -0.0452}, {0.2327, -0.0374, -0.1017}, {0.3961, -0.0506, -0.1243}},
};


static float helice_parte4[4][4][3] =
{
    {{0.0000, 0.0000, 0.0000}, {0.0580, -0.0146, -0.0452}, {0.2327, -0.0374, -0.1017}, {0.3961, -0.0506, -0.1243}},
    {{0.0000, 0.0000, 0.0000}, {0.0590, 0.0096, -0.0452}, {0.2351, 0.0171, -0.1017}, {0.3990, 0.0160, -0.1243}},
    {{0.0000, 0.0000, 0.0000}, {0.0599, 0.0306, -0.0331}, {0.2371, 0.0643, -0.0745}, {0.4015, 0.0737, -0.0910}},
    {{0.0000, 0.0000, 0.0000}, {0.0605, 0.0427, -0.0121}, {0.2383, 0.0915, -0.0272}, {0.4030, 0.1069, -0.0333}},
};

static float controlPointsPropellerBlade[6][6][3] =
{
    {{0.3216, 0.0983, 0.0115}, {0.3276, 0.2338, -0.0248}, {0.3364, 0.4371, -0.0793}, {0.3508, 0.7065, -0.1573}, {0.3620, 0.8621, -0.2086}, {0.3749, 0.8891, -0.2413}},
    {{0.3153, 0.0911, -0.0161}, {0.3212, 0.2266, -0.0525},  {0.3301, 0.4299, -0.1070}, {0.3451, 0.6994, -0.1847}, {0.3524, 0.8580, -0.2253}, {0.3673, 0.8740, -0.2538}},
    {{0.3658, 0.0734, -0.0933}, {0.3715, 0.2041, -0.1284},  {0.3923, 0.4017, -0.2022}, {0.4002, 0.6746, -0.2686}, {0.3931, 0.8393, -0.2884}, {0.3790, 0.8806, -0.2723}},
    {{0.3760, 0.0761, -0.0896}, {0.3816, 0.2048, -0.1241},  {0.3981, 0.4020, -0.1999},  {0.4075, 0.6750, -0.2656}, {0.4054, 0.8402, -0.2831}, {0.3970, 0.8820, -0.2644}},
    {{0.3474, 0.0974, -0.0028}, {0.3532, 0.2291, -0.0381},  {0.3620, 0.4324, -0.0927},  {0.3759, 0.7018, -0.1709}, {0.3813, 0.8602, -0.2123}, {0.3911, 0.8758, -0.2432}},
    {{0.3216, 0.0983, 0.0115}, {0.3276, 0.2338, -0.0248}, {0.3364, 0.4371, -0.0793}, {0.3508, 0.7065, -0.1573}, {0.3620, 0.8621, -0.2086}, {0.3749, 0.8891, -0.2413}},
};

/**bico bico*/

static float bico_parte1[3][5][3] =
{
    {{0.5483, 0.0883, 0.3563}, {0.5418, 0.1372, 0.2918}, {0.5383, 0.1619, 0.1536}, {0.5351, 0.1759, 0.0468},{0.5351, 0.1759, -0.0468}},
    {{0.4466, 0.0747, 0.3019}, {0.4446, 0.1150, 0.2536}, {0.4441, 0.1366, 0.1456}, {0.4439, 0.1447, 0.0468},{0.4439, 0.1447, -0.0468}},
    {{0.4192, 0.0732, 0.1456}, {0.4186, 0.1096, 0.1456}, {0.4175, 0.1210, 0.1456}, {0.4150, 0.0160, 0.0468},{0.4150, 0.0160, -0.0468}},
};

static float bico_parte2[3][4][3] =
{
    {{0.5351, 0.1759, -0.0468}, {0.5383, 0.1619, -0.1536}, {0.5418, 0.1372, -0.2918}, {0.5483, 0.0883, -0.3563}},
    {{0.4439, 0.1447, -0.0468}, {0.4441, 0.1366, -0.1456}, {0.4446, 0.1150, -0.2536}, {0.4466, 0.0747, -0.3019}},
    {{0.4150, 0.0160, -0.0468},{0.4175, 0.1210, -0.1456},{0.4186, 0.1096, -0.1456},{0.4192, 0.0732, -0.1456}},
};

static float bico_parte3[5][2][3] =
{
    {{0.5483, 0.0883, 0.3563}, {0.4466, 0.0747, 0.3019}},
    {{0.5557, 0.0126, 0.3965}, {0.4488, 0.0113, 0.3220}},
    {{0.5767, -0.2066, 0.3797}, {0.4500, -0.1533, 0.2913}},
    {{0.5864, -0.3087, 0.3573}, {0.4941, -0.2540, 0.2514}},
    {{0.5929, -0.4071, 0.2710}, {0.5461, -0.3558, 0.1650}},
};

static float bico_parte4[5][2][3] =
{
    {{0.5483, 0.0883, -0.3563}, {0.4466, 0.0747, -0.3019}},
    {{0.5557, 0.0126, -0.3965}, {0.4488, 0.0113, -0.3220}},
    {{0.5767, -0.2066, -0.3797}, {0.4500, -0.1533, -0.2913}},
    {{0.5864, -0.3087, -0.3573}, {0.4941, -0.2540, -0.2514}},
    {{0.5929, -0.4071, -0.2710}, {0.5461, -0.3558, -0.1650}},
};

static float bico_parte5[6][4][3] =
{
    {{0.4175, 0.1210, 0.1456}, {0.4150, 0.0160, 0.0468}, {0.4150, 0.0160, -0.0468}, {0.4175, 0.1210, -0.1456}},
    {{0.4186, 0.1096, 0.1456}, {0.4118, 0.1088, 0.0468}, {0.4118, 0.1088, -0.0468}, {0.4186, 0.1096, -0.1456}},
    {{0.4192, 0.0732, 0.1456}, {0.4069, 0.0861, 0.0468}, {0.4069, 0.0861, -0.0468}, {0.4192, 0.0732, -0.1456}},
    {{0.4194, 0.0071, 0.1456}, {0.4041, 0.0026, 0.0468}, {0.4041, 0.0026, -0.0468}, {0.4194, 0.0071, -0.1456}},
    {{0.4165, -0.1283, 0.1456}, {0.4020, -0.1041, 0.0468}, {0.4020, -0.1041, -0.0468}, {0.4165, -0.1283, -0.1456}},
    {{0.4165, -0.1283, 0.1456}, {0.4000, -0.1323, 0.0468}, {0.4000, -0.1323, -0.0468}, {0.4165, -0.1283, -0.1456}},
};

static float bico_parte6[4][4][3] =
{
    {{0.4500, -0.1533, 0.2913}, {0.4099, -0.1596, 0.0468}, {0.4099, -0.1596, -0.0468}, {0.4500, -0.1533, -0.2913}},
    {{0.4941, -0.2540, 0.2514}, {0.4388, -0.2140, 0.0468}, {0.4388, -0.2140, -0.0468}, {0.4941, -0.2540, -0.2514}},
    {{0.5461, -0.3558, 0.1650}, {0.5021, -0.3313, 0.0545}, {0.5021, -0.3313, -0.0545}, {0.5461, -0.3558, -0.1650}},
    {{0.5461, -0.3558, 0.1650}, {0.5293, -0.3768, 0.0595}, {0.5293, -0.3768, -0.0595}, {0.5461, -0.3558, -0.1650}},
};

static float bico_parte7[3][3][3] =
{
    {{0.5293, -0.3768, -0.0595}, {0.5293, -0.3768, 0.0595}, {0.5461, -0.3558, 0.1650}},
    {{0.5658, -0.4244, -0.0687}, {0.5658, -0.4244, 0.0687}, {0.5929, -0.4071, 0.2710}},
    {{0.5985, -0.4605, -0.0776}, {0.5985, -0.4605, 0.0776}, {0.5970, -0.4501, 0.1456}},
};

static float bico_parte8[3][2][3] =
{
    {{0.5293, -0.3768, -0.0595}, {0.5461, -0.3558, -0.1650}},
    {{0.5658, -0.4244, -0.0687}, {0.5929, -0.4071, -0.2710}},
    {{0.5985, -0.4605, -0.0776}, {0.5970, -0.4501, -0.1456}},
};


/**janelas*/
static float janela_pt1[5][6][3] =
{
    {{1.5420, 0.3033, -0.0468}, {1.5420, 0.3033, 0.0468}, {1.5559, 0.2847, 0.2352}, {1.6141, 0.2469, 0.3922}, {1.7069, 0.1971, 0.4882}, {1.8908, 0.1402, 0.5418}},
    {{1.5696, 0.3332, -0.0468}, {1.5696, 0.3332, 0.0468}, {1.5858, 0.3161, 0.2408}, {1.6482, 0.2717, 0.3964}, {1.7362, 0.2288, 0.4882}, {1.8954, 0.1750, 0.5418}},
    {{1.7262, 0.4659, -0.0468}, {1.7262, 0.4659, 0.0468}, {1.7390, 0.4503, 0.2587}, {1.7734, 0.4161, 0.4088}, {1.8366, 0.3665, 0.5095}, {1.9331, 0.3144, 0.5439}},
    {{1.9015, 0.5876, -0.0468}, {1.9015, 0.5876, 0.0468}, {1.9110, 0.5714, 0.2744}, {1.9274, 0.5513, 0.4171}, {1.9608, 0.5144, 0.5250}, {1.9989, 0.4854, 0.5507}},
    {{2.0242, 0.6555, -0.0468}, {2.0242, 0.6555, 0.0468}, {2.0298, 0.6421, 0.2811}, {2.0391, 0.6281, 0.4171}, {2.0619, 0.5957, 0.5319}, {2.0619, 0.5957, 0.5319}},
};

static float janela_pt1_esp[5][5][3] =
{
    {{1.5420, 0.3033, -0.0468}, {1.5559, 0.2847, -0.2352}, {1.6141, 0.2469, -0.3922}, {1.7069, 0.1971, -0.4882}, {1.8908, 0.1402, -0.5418}},
    {{1.5696, 0.3332, -0.0468}, {1.5858, 0.3161, -0.2408}, {1.6482, 0.2717, -0.3964}, {1.7362, 0.2288, -0.4882}, {1.8954, 0.1750, -0.5418}},
    {{1.7262, 0.4659, -0.0468}, {1.7390, 0.4503, -0.2587}, {1.7734, 0.4161, -0.4088}, {1.8366, 0.3665, -0.5095}, {1.9331, 0.3144, -0.5439}},
    {{1.9015, 0.5876, -0.0468}, {1.9110, 0.5714, -0.2744}, {1.9274, 0.5513, -0.4171}, {1.9608, 0.5144, -0.5250}, {1.9989, 0.4854, -0.5507}},
    {{2.0242, 0.6555, -0.0468}, {2.0298, 0.6421, -0.2811}, {2.0391, 0.6281, -0.4171}, {2.0619, 0.5957, -0.5319}, {2.0619, 0.5957, -0.5319}},
};

static float janela_pt2[4][5][3] =
{
    {{2.0242, 0.6555, -0.0468}, {2.0242, 0.6555, 0.0468}, {2.0298, 0.6421, 0.2811}, {2.0391, 0.6281, 0.4171}, {2.0619, 0.5957, 0.5319}},
    {{2.0968, 0.6733, -0.0468}, {2.0968, 0.6733, 0.0468}, {2.0984, 0.6701, 0.2835}, {2.1103, 0.6669, 0.4171}, {2.1674, 0.6708, 0.5414}},
    {{2.1679, 0.6776, -0.0468}, {2.1679, 0.6776, 0.0468}, {2.1678, 0.6760, 0.2835}, {2.1676, 0.6738, 0.4171}, {2.1674, 0.6708, 0.5414}},
    {{2.2215, 0.6753, -0.0468}, {2.2215, 0.6753, 0.0468}, {2.2185, 0.6748, 0.2835}, {2.2125, 0.6738, 0.4171}, {2.2064, 0.6706, 0.5616}},
};

static float janela_pt2_esp[4][4][3] =
{
    {{2.0242, 0.6555, -0.0468}, {2.0298, 0.6421, -0.2811}, {2.0391, 0.6281, -0.4171}, {2.0619, 0.5957, -0.5319}},
    {{2.0968, 0.6733, -0.0468}, {2.0984, 0.6701, -0.2835}, {2.1103, 0.6669, -0.4171}, {2.1674, 0.6708, -0.5414}},
    {{2.1679, 0.6776, -0.0468}, {2.1678, 0.6760, -0.2835}, {2.1676, 0.6738, -0.4171}, {2.1674, 0.6708, -0.5414}},
    {{2.2215, 0.6753, -0.0468}, {2.2185, 0.6748, -0.2835}, {2.2125, 0.6738, -0.4171}, {2.2064, 0.6706, -0.5616}},
};

static float janela_tra[6][5][3] =
{
    {{4.3225, 0.3039, -0.0311}, {4.2899, 0.3186, -0.0311}, {4.1688, 0.3844, -0.0311}, {4.0128, 0.4499, -0.0311}, {3.8080, 0.5022, -0.0311}},
    {{4.3225, 0.3039, 0.0311}, {4.2899, 0.3186, 0.0311}, {4.1688, 0.3844, 0.0311}, {4.0128, 0.4499, 0.0311}, {3.8080, 0.5022, 0.0311}},
    {{4.2995, 0.2864, 0.1936}, {4.2636, 0.3010, 0.1936}, {4.1506, 0.3719, 0.1936}, {4.0032, 0.4417, 0.1936}, {3.8160, 0.4936, 0.1936}},
    {{4.2625, 0.2571, 0.3467}, {4.2295, 0.2743, 0.3467}, {4.1157, 0.3542, 0.3517}, {3.9804, 0.4284, 0.3605}, {3.8467, 0.4707, 0.3729}},
    {{4.1980, 0.2381, 0.4115}, {4.1713, 0.2525, 0.4157}, {4.0583, 0.3333, 0.4221}, {3.9459, 0.4152, 0.4284}, {3.8738, 0.4435, 0.4333}},
    {{4.0870, 0.2144, 0.4693}, {4.0614, 0.2222, 0.4728}, {3.9728, 0.3125, 0.4811}, {3.9101, 0.4099, 0.4666}, {3.8738, 0.4435, 0.4333}},
};

static float janela_tra_esp[5][5][3] =
{
    {{4.3225, 0.3039, -0.0311}, {4.2899, 0.3186, -0.0311}, {4.1688, 0.3844, -0.0311}, {4.0128, 0.4499, -0.0311}, {3.8080, 0.5022, -0.0311}},
    {{4.2995, 0.2864, -0.1936}, {4.2636, 0.3010, -0.1936}, {4.1506, 0.3719, -0.1936}, {4.0032, 0.4417, -0.1936}, {3.8160, 0.4936, -0.1936}},
    {{4.2625, 0.2571, -0.3467}, {4.2295, 0.2743, -0.3467}, {4.1157, 0.3542, -0.3517}, {3.9804, 0.4284, -0.3605}, {3.8467, 0.4707, -0.3729}},
    {{4.1980, 0.2381, -0.4115}, {4.1713, 0.2525, -0.4157}, {4.0583, 0.3333, -0.4221}, {3.9459, 0.4152, -0.4284}, {3.8738, 0.4435, -0.4333}},
    {{4.0870, 0.2144, -0.4693}, {4.0614, 0.2222, -0.4728}, {3.9728, 0.3125, -0.4811}, {3.9101, 0.4099, -0.4666}, {3.8738, 0.4435, -0.4333}},
};

static float janela_tra_pt2[6][4][3] =
{
    {{3.0788, 0.0788, 0.5617}, {3.0894, 0.3827, 0.5617}, {3.0414, 0.4739, 0.5617}, {3.0414, 0.4739, 0.5617}},
    {{3.0788, 0.0788, 0.5617}, {3.1500, 0.1481, 0.5617}, {3.1502, 0.3909, 0.5617}, {3.0972, 0.5005, 0.5617}},
    {{3.0788, 0.0788, 0.5617}, {3.1838, 0.1075, 0.5617}, {3.1912, 0.4335, 0.5617}, {3.0972, 0.5005, 0.5617}},
    {{3.5076, 0.0803, 0.5617}, {3.5031, 0.0988, 0.5617}, {3.6492, 0.3913, 0.5570}, {3.5451, 0.4912, 0.5617}},
    {{3.6789, 0.0846, 0.5570}, {3.6748, 0.1122, 0.5570}, {3.7625, 0.3550, 0.5495}, {3.8027, 0.4368, 0.5322}},
    {{3.9475, 0.1342, 0.5156}, {3.9031, 0.1635, 0.5276}, {3.9091, 0.1816, 0.5276}, {3.8694, 0.2603, 0.5333}},
};

static float janela_tra_pt2_esp[6][4][3] =
{
    {{3.0788, 0.0788, -0.5617}, {3.0894, 0.3827, -0.5617}, {3.0414, 0.4739, -0.5617}, {3.0414, 0.4739, -0.5617}},
    {{3.0788, 0.0788, -0.5617}, {3.1500, 0.1481, -0.5617}, {3.1502, 0.3909, -0.5617}, {3.0972, 0.5005, -0.5617}},
    {{3.0788, 0.0788, -0.5617}, {3.1838, 0.1075, -0.5617}, {3.1912, 0.4335, -0.5617}, {3.0972, 0.5005, -0.5617}},
    {{3.5076, 0.0803, -0.5617}, {3.5031, 0.0988, -0.5617}, {3.6492, 0.3913, -0.5570}, {3.5451, 0.4912, -0.5617}},
    {{3.6789, 0.0846, -0.5570}, {3.6748, 0.1122, -0.5570}, {3.7625, 0.3550, -0.5495}, {3.8027, 0.4368, -0.5322}},
    {{3.9475, 0.1342, -0.5156}, {3.9031, 0.1635, -0.5276}, {3.9091, 0.1816, -0.5276}, {3.8694, 0.2603, -0.5333}},
};

static float janela_meio[3][4][3] =
{
    {{3.0788, 0.0788, 0.5617}, {3.0671, 0.0793, 0.5617}, {2.2243, 0.1129, 0.5486}, {2.2126, 0.1134, 0.5486}},
    {{3.0894, 0.3827, 0.5617}, {3.0064, 0.4135, 0.5617}, {2.3575, 0.4403, 0.5617}, {2.2987, 0.4008, 0.5617}},
    {{3.0972, 0.5005, 0.5617}, {3.0414, 0.4739, 0.5617}, {2.3202, 0.5057, 0.5617}, {2.2850, 0.4927, 0.5617}},
};

static float janela_meio_esp[3][4][3] =
{
    {{3.0788, 0.0788, -0.5617}, {3.0671, 0.0793, -0.5617}, {2.2243, 0.1129, -0.5486}, {2.2126, 0.1134, -0.5486}},
    {{3.0894, 0.3827, -0.5617}, {3.0064, 0.4135, -0.5617}, {2.3575, 0.4403, -0.5617}, {2.2987, 0.4008, -0.5617}},
    {{3.0972, 0.5005, -0.5617}, {3.0414, 0.4739, -0.5617}, {2.3202, 0.5057, -0.5617}, {2.2850, 0.4927, -0.5617}},
};

static float janela_frente[3][4][3] =
{
    {{1.8908, 0.1402, 0.5418}, {1.9331, 0.3144, 0.5439}, {1.9989, 0.4854, 0.5507}, {2.0619, 0.5957, 0.5319}},
    {{2.0862, 0.1577, 0.5507}, {2.1114, 0.2539, 0.5507}, {2.1505, 0.4292, 0.5444}, {2.1674, 0.6708, 0.5414}},
    {{2.2243, 0.1129, 0.5486}, {2.2964, 0.4846, 0.5617}, {2.2064, 0.6706, 0.5616}, {2.2064, 0.6706, 0.5616}},
};

static float janela_frente_esp[3][4][3] =
{
    {{1.8908, 0.1402, -0.5418}, {1.9331, 0.3144, -0.5439}, {1.9989, 0.4854, -0.5507}, {2.0619, 0.5957, -0.5319}},
    {{2.0862, 0.1577, -0.5507}, {2.1114, 0.2539, -0.5507}, {2.1505, 0.4292, -0.5444}, {2.1674, 0.6708, -0.5414}},
    {{2.2243, 0.1129, -0.5486}, {2.2964, 0.4846, -0.5617}, {2.2064, 0.6706, -0.5616}, {2.2064, 0.6706, -0.5616}},
};


/**asa partes*/

static float asa_pt1[6][5][3] =
{
    {{2.2210, 0.6996, -5.3128}, {2.2454, 0.7220, -5.3128}, {2.2932, 0.7433, -5.3128}, {2.3872, 0.7509, -5.3128}, {3.0994, 0.6964, -5.3128}},
    {{2.0417, 0.6179, -2.5277}, {2.0674, 0.6681, -2.5277}, {2.1155, 0.6977, -2.5277}, {2.2098, 0.7118, -2.5277}, {3.4008, 0.6248, -2.5277}},
    {{2.0399, 0.5753, -0.5383}, {2.0653, 0.6205, -0.5383}, {2.1137, 0.6569, -0.5383}, {2.2083, 0.6767, -0.5383}, {3.3985, 0.5732, -0.5383}},
    {{2.0399, 0.5753, 0.5383}, {2.0653, 0.6205, 0.5383}, {2.1137, 0.6569, 0.5383}, {2.2083, 0.6767, 0.5383}, {3.3985, 0.5732, 0.5383}},
    {{2.0417, 0.6179, 2.5277}, {2.0674, 0.6681, 2.5277}, {2.1155, 0.6977, 2.5277}, {2.2098, 0.7118, 2.5277}, {3.4008, 0.6248, 2.5277}},
    {{2.2210, 0.6996, 5.3128}, {2.2454, 0.7220, 5.3128}, {2.2932, 0.7433, 5.3128}, {2.3872, 0.7509, 5.3128}, {3.0994, 0.6964, 5.3128}},
};

static float asa_pt2[6][5][3] =
{
    {{2.2210, 0.6996, -5.3128}, {2.2434, 0.6752, -5.3128}, {2.2891, 0.6498, -5.3128}, {2.3821, 0.6340, -5.3128}, {3.0968, 0.6380, -5.3128}},
    {{2.0417, 0.6179, -2.5277}, {2.0638, 0.5875, -2.5277}, {2.1093, 0.5556, -2.5277}, {2.2019, 0.5296, -2.5277}, {3.3966, 0.5293, -2.5277}},
    {{2.0399, 0.5753, -0.5383}, {2.0611, 0.5259, -0.5383}, {2.1070, 0.5021, -0.5383}, {2.1997, 0.4794, -0.5383}, {3.3939, 0.4677, -0.5383}},
    {{2.0399, 0.5753, 0.5383}, {2.0611, 0.5259, 0.5383}, {2.1070, 0.5021, 0.5383}, {2.1997, 0.4794, 0.5383}, {3.3939, 0.4677, 0.5383}},
    {{2.0417, 0.6179, 2.5277}, {2.0638, 0.5875, 2.5277}, {2.1093, 0.5556, 2.5277}, {2.2019, 0.5296, 2.5277}, {3.3966, 0.5293, 2.5277}},
    {{2.2210, 0.6996, 5.3128}, {2.2434, 0.6752, 5.3128}, {2.2891, 0.6498, 5.3128}, {2.3821, 0.6340, 5.3128}, {3.0968, 0.6380, 5.3128}},
};

static float asa_pt3[4][6][3] =
{
    {{2.2210, 0.6996, 5.3128}, {2.2454, 0.7220, 5.3128}, {2.2932, 0.7433, 5.3128}, {2.3872, 0.7509, 5.3128}, {3.0994, 0.6964, 5.3128}, {3.3906, 0.6603, 5.3128}},
    {{2.2544, 0.6837, 5.3948}, {2.2787, 0.7038, 5.3948}, {2.3264, 0.7252, 5.3948}, {2.4205, 0.7328, 5.3948}, {3.0987, 0.6798, 5.3948}, {3.3899, 0.6436, 5.3948}},
    {{2.3312, 0.6709, 5.4533}, {2.3554, 0.6883, 5.4533}, {2.4030, 0.7068, 5.4533}, {2.4971, 0.7144, 5.4533}, {3.0980, 0.6642, 5.4533}, {3.3825, 0.6334, 5.4533}},
    {{2.4829, 0.6493, 5.5118}, {2.5069, 0.6633, 5.5118}, {2.5547, 0.6852, 5.5118}, {2.6488, 0.6928, 5.5118}, {3.0973, 0.6492, 5.5118}, {3.3554, 0.6195, 5.5118}},
};

static float asa_pt3_esp[4][6][3] =
{
    {{2.2210, 0.6996, -5.3128}, {2.2454, 0.7220, -5.3128}, {2.2932, 0.7433, -5.3128}, {2.3872, 0.7509, -5.3128}, {3.0994, 0.6964, -5.3128}, {3.3906, 0.6603, -5.3128}},
    {{2.2544, 0.6837, -5.3948}, {2.2787, 0.7038, -5.3948}, {2.3264, 0.7252, -5.3948}, {2.4205, 0.7328, -5.3948}, {3.0987, 0.6798, -5.3948}, {3.3899, 0.6436, -5.3948}},
    {{2.3312, 0.6709, -5.4533}, {2.3554, 0.6883, -5.4533}, {2.4030, 0.7068, -5.4533}, {2.4971, 0.7144, -5.4533}, {3.0980, 0.6642, -5.4533}, {3.3825, 0.6334, -5.4533}},
    {{2.4829, 0.6493, -5.5118}, {2.5069, 0.6633, -5.5118}, {2.5547, 0.6852, -5.5118}, {2.6488, 0.6928, -5.5118}, {3.0973, 0.6492, -5.5118}, {3.3554, 0.6195, -5.5118}},
};

static float asa_pt4[4][6][3] =
{
    {{2.2210, 0.6996, 5.3128}, {2.2434, 0.6752, 5.3128}, {2.2891, 0.6498, 5.3128}, {2.3821, 0.6340, 5.3128}, {3.0968, 0.6380, 5.3128}, {3.3901, 0.6886, 5.3128}},
    {{2.2544, 0.6837, 5.3948}, {2.2770, 0.6649, 5.3948}, {2.3231, 0.6483, 5.3948}, {2.4161, 0.6325, 5.3948}, {3.0964, 0.6291, 5.3948}, {3.3895, 0.6341, 5.3948}},
    {{2.3312, 0.6709, 5.4533}, {2.3537, 0.6515, 5.4533}, {2.4000, 0.6377, 5.4533}, {2.4933, 0.6275, 5.4533}, {3.0960, 0.6191, 5.4533}, {3.3825, 0.6334, 5.4533}},
    {{2.4829, 0.6493, 5.5118}, {2.5056, 0.6337, 5.5118}, {2.5519, 0.6205, 5.5118}, {2.6451, 0.6086, 5.5118}, {3.0955, 0.6080, 5.5118}, {3.3554, 0.6195, 5.5118}},
};

static float asa_pt4_esp[4][6][3] =
{
    {{2.2210, 0.6996, -5.3128}, {2.2434, 0.6752, -5.3128}, {2.2891, 0.6498, -5.3128}, {2.3821, 0.6340, -5.3128}, {3.0968, 0.6380, -5.3128}, {3.3901, 0.6886, -5.3128}},
    {{2.2544, 0.6837, -5.3948}, {2.2770, 0.6649, -5.3948}, {2.3231, 0.6483, -5.3948}, {2.4161, 0.6325, -5.3948}, {3.0964, 0.6291, -5.3948}, {3.3895, 0.6341, -5.3948}},
    {{2.3312, 0.6709, -5.4533}, {2.3537, 0.6515, -5.4533}, {2.4000, 0.6377, -5.4533}, {2.4933, 0.6275, -5.4533}, {3.0960, 0.6191, -5.4533}, {3.3825, 0.6334, -5.4533}},
    {{2.4829, 0.6493, -5.5118}, {2.5056, 0.6337, -5.5118}, {2.5519, 0.6205, -5.5118}, {2.6451, 0.6086, -5.5118}, {3.0955, 0.6080, -5.5118}, {3.3554, 0.6195, -5.5118}},
};

static float asa_pt5[2][6][3] =
{
    {{2.4829, 0.6493, 5.5118}, {2.5069, 0.6633, 5.5118}, {2.5547, 0.6852, 5.5118}, {2.6488, 0.6928, 5.5118}, {3.0973, 0.6492, 5.5118}, {3.3554, 0.6195, 5.5118}},
    {{2.4829, 0.6493, 5.5118}, {2.5056, 0.6337, 5.5118}, {2.5519, 0.6205, 5.5118}, {2.6451, 0.6086, 5.5118}, {3.0955, 0.6080, 5.5118}, {3.3554, 0.6195, 5.5118}},
};

static float asa_pt5_esp[2][6][3] =
{
    {{2.4829, 0.6493, -5.5118}, {2.5069, 0.6633, -5.5118}, {2.5547, 0.6852, -5.5118}, {2.6488, 0.6928, -5.5118}, {3.0973, 0.6492, -5.5118}, {3.3554, 0.6195, -5.5118}},
    {{2.4829, 0.6493, -5.5118}, {2.5056, 0.6337, -5.5118}, {2.5519, 0.6205, -5.5118}, {2.6451, 0.6086, -5.5118}, {3.0955, 0.6080, -5.5118}, {3.3554, 0.6195, -5.5118}},
};

/**flepes*/

static float flepe[3][2][3] =
{
    {{3.4102, 0.5727, 0.5500}, {3.7469, 0.5039, 0.5500}},
    {{3.4125, 0.6243, 2.5394}, {3.7498, 0.5690, 2.5277}},
    {{3.1111, 0.6959, 5.3011}, {3.3906, 0.6603, 5.3011}},
};

static float flepe_esp[3][2][3] =
{
    {{3.4102, 0.5727, -0.5500}, {3.7469, 0.5039, -0.5500}},
    {{3.4125, 0.6243, -2.5394}, {3.7498, 0.5690, -2.5277}},
    {{3.1111, 0.6959, -5.3011}, {3.3906, 0.6603, -5.3011}},
};

static float flepe_pt1[3][2][3] =
{
    {{3.4056, 0.4672, 0.5500}, {3.7460, 0.4828, 0.5500}},
    {{3.4083, 0.5288, 2.5394}, {3.7487, 0.5434, 2.5277}},
    {{3.1085, 0.6374, 5.3011}, {3.3901, 0.6486, 5.3011}},
};

static float flepe_pt1_esp[3][2][3] =
{
    {{3.4056, 0.4672, -0.5500}, {3.7460, 0.4828, -0.5500}},
    {{3.4083, 0.5288, -2.5394}, {3.7487, 0.5434, -2.5277}},
    {{3.1085, 0.6374, -5.3011}, {3.3901, 0.6486, -5.3011}},
};

static float fecha_flepe[3][2][3] =
{
    {{3.7469, 0.5039, 0.5500}, {3.7460, 0.4828, 0.5500}},
    {{3.7498, 0.5690, 2.5277}, {3.7487, 0.5434, 2.5277}},
    {{3.3906, 0.6603, 5.3011}, {3.3901, 0.6486, 5.3011}},
};

static float fecha_flepe_esp[3][2][3] =
{
    {{3.7469, 0.5039, -0.5500}, {3.7460, 0.4828, -0.5500}},
    {{3.7498, 0.5690, -2.5277}, {3.7487, 0.5434, -2.5277}},
    {{3.3906, 0.6603, -5.3011}, {3.3901, 0.6486, -5.3011}},
};

static float fecha_flepe_pt1[2][2][3] =
{
    {{3.3906, 0.6603, 5.3011}, {3.1085, 0.6374, 5.3011}},
    {{3.3906, 0.6603, 5.3011}, {3.3901, 0.6486, 5.3011}},
};

static float fecha_flepe_pt1_esp[2][2][3] =
{
    {{3.3906, 0.6603, -5.3011}, {3.1085, 0.6374, -5.3011}},
    {{3.3906, 0.6603, -5.3011}, {3.3901, 0.6486, -5.3011}},
};

static float fecha_flepe_pt2[2][2][3] =
{
    {{3.4102, 0.5727, 0.5500}, {3.7469, 0.5039, 0.5500}},
    {{3.4056, 0.4672, 0.5500}, {3.7460, 0.4828, 0.5500}},
};

static float fecha_flepe_pt2_esp[2][2][3] =
{
    {{3.4102, 0.5727, -0.5500}, {3.7469, 0.5039, -0.5500}},
    {{3.4056, 0.4672, -0.5500}, {3.7460, 0.4828, -0.5500}},
};

/**detalhes*/
static float det_pt1[6][3][3] =
{
    {{1.5696, 0.3332, -0.0468}, {1.5420, 0.3033, -0.0468}, {1.3244, 0.2863, -0.0468}},
    {{1.5696, 0.3332, 0.0468}, {1.5420, 0.3033, 0.0468}, {1.3244, 0.2863, 0.0468}},
    {{1.5858, 0.3161, 0.2408}, {1.5559, 0.2847, 0.2352}, {1.3234, 0.2629, 0.2139}},
    {{1.6482, 0.2717, 0.3964}, {1.6141, 0.2469, 0.3922}, {1.3214, 0.2161, 0.3601}},
    {{1.7362, 0.2288, 0.4882}, {1.7069, 0.1971, 0.4882}, {1.3186, 0.1523, 0.4483}},
    {{1.8954, 0.1750, 0.5418}, {1.8908, 0.1402, 0.5418}, {1.7003, 0.0198, 0.5350}},
};

static float det_pt1_esp[5][3][3] =
{
    {{1.5696, 0.3332, -0.0468}, {1.5420, 0.3033, -0.0468}, {1.3244, 0.2863, -0.0468}},
    {{1.5858, 0.3161, -0.2408}, {1.5559, 0.2847, -0.2352}, {1.3234, 0.2629, -0.2139}},
    {{1.6482, 0.2717, -0.3964}, {1.6141, 0.2469, -0.3922}, {1.3214, 0.2161, -0.3601}},
    {{1.7362, 0.2288, -0.4882}, {1.7069, 0.1971, -0.4882}, {1.3186, 0.1523, -0.4483}},
    {{1.8954, 0.1750, -0.5418}, {1.8908, 0.1402, -0.5418}, {1.7003, 0.0198, -0.5350}},
};

static float det_pt2[6][3][3] =
{
    {{4.0870, 0.2144, 0.4693}, {3.9475, 0.1342, 0.5156}, {3.9031, 0.1635, 0.5276}},
    {{4.0614, 0.2222, 0.4728}, {3.9626, 0.1805, 0.5141}, {3.9091, 0.1816, 0.5276}},
    {{3.9728, 0.3125, 0.4811}, {3.9223, 0.3050, 0.5233}, {3.8694, 0.2603, 0.5333}},
    {{3.9101, 0.4099, 0.4666}, {3.8027, 0.4368, 0.5322}, {3.7625, 0.3550, 0.5495}},
    {{3.8738, 0.4435, 0.4333}, {3.7460, 0.4828, 0.5383}, {3.5451, 0.4912, 0.5617}},
    {{3.8467, 0.4707, 0.3729}, {3.7460, 0.4828, 0.5383}, {3.5451, 0.4912, 0.5617}},
};

static float det_pt2_esp[6][3][3] =
{
    {{4.0870, 0.2144, -0.4693}, {3.9475, 0.1342, -0.5156}, {3.9031, 0.1635, -0.5276}},
    {{4.0614, 0.2222, -0.4728}, {3.9626, 0.1805, -0.5141}, {3.9091, 0.1816, -0.5276}},
    {{3.9728, 0.3125, -0.4811}, {3.9223, 0.3050, -0.5233}, {3.8694, 0.2603, -0.5333}},
    {{3.9101, 0.4099, -0.4666}, {3.8027, 0.4368, -0.5322}, {3.7625, 0.3550, -0.5495}},
    {{3.8738, 0.4435, -0.4333}, {3.7460, 0.4828, -0.5383}, {3.5451, 0.4912, -0.5617}},
    {{3.8467, 0.4707, -0.3729}, {3.7460, 0.4828, -0.5383}, {3.5451, 0.4912, -0.5617}},
};

static float det_pt3[3][3][3] =
{
    {{3.3985, 0.5735, 0.5383}, {3.3985, 0.5735, 0.0000}, {3.3985, 0.5735, -0.5383}},
    {{3.7469, 0.5039, 0.5383}, {3.7469, 0.5039, 0.0000}, {3.7469, 0.5039, -0.5383}},

};

static float det_pt4[9][2][3] =
{
    {{3.9101, 0.4099, 0.4666}, {3.8027, 0.4368, 0.5322}},
    {{3.8738, 0.4435, 0.4333}, {3.7460, 0.4828, 0.5383}},
    {{3.8467, 0.4707, 0.3729}, {3.7469, 0.5039, 0.5383}},
    {{3.8160, 0.4936, 0.1936}, {3.7469, 0.5039, 0.5383}},
    {{3.8080, 0.5022, 0.3111}, {3.7469, 0.5039, 0.0000}},
    {{3.8160, 0.4936, -0.1936}, {3.7469, 0.5039, -0.5383}},
    {{3.8467, 0.4707, -0.3729}, {3.7469, 0.5039, -0.5383}},
    {{3.8738, 0.4435, -0.4333}, {3.7460, 0.4828, -0.5383}},
    {{3.9101, 0.4099, -0.4666}, {3.8027, 0.4368, -0.5322}},
};

int x=0,y=0;
static float Xangle = 0.0, Yangle = 0.0, Zangle = 0.0; // Angles to rotate canoe.
static int animateMode = 0; // In animation mode?
static int animationPeriod = 50; // Speed of animation.
static float angle = 0; // Angle of torpedo propeller turn.
float a = 0;
float push = 0.0, leme2 = 0.0;
int coun = 0;
static float d = 2.0; // Intensity of sun light.
static float theta = 45.0; // Angle of the sun with the ground.
GLuint base;

void desenha(void);


void animate(int value)
{
    if (animateMode)
    {
        angle += a;
        if (angle > 360.0) angle -= 360.0;
    }
    if((animateMode) && (coun == 3))
    {
        x-=1;
        y=(x/2)*-1;
        if(x == -10) y +=7;

    }

    glutTimerFunc(animationPeriod, animate, 1);
    glutPostRedisplay();
}

// Initialization routine.

void setup(void)
{

    GLfloat mat_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_specular[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat high_shininess[] = { 100.0 };
    GLfloat mat_emission[] = {0.0, 0.0, 0.0, 1.0};


    // Initialize GLU quadric object.
    qobj = gluNewQuadric();
    gluQuadricDrawStyle(qobj, GLU_LINE);

    // Generate display list base.
    base = glGenLists(6);

    // Fin.


    // Propeller blade.
    glNewList (base+1, GL_COMPILE);
    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);
    // Enable Bezier surface: a bicubic Bezier patch.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 6, controlPointsPropellerBlade[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    glEnable(GL_AUTO_NORMAL);
    glEnable(GL_NORMALIZE);
    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);

    // Create Bezier surface.
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glPopMatrix();

    glEndList();


    glNewList (base+2, GL_COMPILE);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);
    glutSolidSphere(5,10,50);
    glEndList();

    glNewList (base+3,GL_COMPILE);
    desenha();
    glEndList();
}

void flepe1(void)
{
    GLfloat mat_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_specular[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat high_shininess[] = { 100.0 };
    GLfloat mat_emission[] = {0.0, 0.0, 0.0, 1.0};

    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 3, flepe[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 3, flepe_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 3, flepe_pt1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 3, flepe_pt1_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 3, fecha_flepe[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 3, fecha_flepe_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, fecha_flepe_pt1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, fecha_flepe_pt1_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, fecha_flepe_pt2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, fecha_flepe_pt2_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);
    glPopMatrix();
}

void flepe2(void)
{
    GLfloat mat_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_specular[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat high_shininess[] = { 100.0 };
    GLfloat mat_emission[] = {0.5, 0.5, 0.5, 1.0};

    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro_inf[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro_fec[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro_fec2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.
    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro_inf_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);
    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro_fec_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 2, profundor_pro_fec2_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glPopMatrix();
}

void leme1(void)
{
    GLfloat mat_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_specular[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat high_shininess[] = { 100.0 };
    GLfloat mat_emission[] = {0.5, 0.5, 0.5, 1.0};


    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 6, leme[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 6, leme_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 9, leme_fecha[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 6, leme_fecha2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(5, 0.0, 1.0, 5, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 5, 0, 5);

    glPopMatrix();
}

void myinit(void)
{
   glClearColor(0.0, 0.0, 0.0, 0.0);
   glEnable(GL_DEPTH_TEST); // Enable depth testing.

   // Turn on OpenGL lighting.
   glEnable(GL_LIGHTING);

   // Light property vectors that are constant.
   float lightAmb[] = { 0.0, 0.0, 0.0, 1.0 };
   float globAmb[] = { 0.2, 0.2, 0.2, 1.0 };

   // Light properties.
   glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmb);

   glEnable(GL_LIGHT0); // Enable particular light source.
   glLightModelfv(GL_LIGHT_MODEL_AMBIENT, globAmb); // Global ambient light.

	// Material property vectors.
   float matAmbAndDif[] = {1.0, 1.0, 1.0, 1.0};
   float matSpec[] = { 1.0, 1.0, 1.0, 1.0 };
   float matShine[] = { 50.0 };

   // Material properties.
   glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, matAmbAndDif);
   glMaterialfv(GL_FRONT, GL_SPECULAR, matSpec);
   glMaterialfv(GL_FRONT, GL_SHININESS, matShine);

}

void desenha(void)
{

    GLfloat mat_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat mat_specular[] = { 0.5, 0.5, 0.5, 1.0 };
    GLfloat high_shininess[] = { 100.0 };
    GLfloat mat_emission[] = {0.5, 0.5, 0.5, 1.0};


    GLfloat mat_amesp[] = { 0.0, 0.0, 0.8, 1.0 };
    GLfloat mat_difesp[] = { 0.0, 0.0, 0.8, 1.0 };
    GLfloat mat_specesp[] = { 0.0, 0.0, 0.8, 1.0 };
    GLfloat mat_emiesp[] = {0.0, 0.0, 0.8, 0.0};


    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 6, det_pt1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 5, det_pt1_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 6, det_pt2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);


    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 6, det_pt2_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);


    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 9, det_pt4[0][0]);
    glEnable(GL_MAP2_VERTEX_3);


    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 2, det_pt3[0][0]);
    glEnable(GL_MAP2_VERTEX_3);


    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glPopMatrix();

    /***corpo aviao*/
    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 11, bico1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);


    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 11, bico2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);


    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 8, lateral_porta1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 7, lateral_porta2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 7, lateral_traseiro1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 8, lateral_traseiro2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);


    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 3, lateral_sup1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);


    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 3, lateral_sup2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 3, sup1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 3, sup2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 2, sup_sup[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 11, traseira[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**traseira espelho*/
    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 11, traseira_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    // Specify and enable the Bezier surface.
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 9, 0, 1, 27, 2, fundo_fecha[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);
    glPopMatrix();

    /***asa profundor e leme */
    glPushMatrix();

    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    /**profundor sup*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, profundor_sup[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor infe*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, profundor_infe[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor sup1*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 2, profundor_sup1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor infe1*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 2, profundor_infe1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor fecha*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 18, 2, profundor_fecha[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor sup*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, profundor_sup_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor infe*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, profundor_infe_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor sup1*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 2, profundor_sup1_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor infe1*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 2, profundor_infe1_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**profundor fecha*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 18, 2, profundor_fecha_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**asa leme*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, asa_leme[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**asa leme espelho*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, asa_leme_espelho[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    /**asa leme fecha*/
    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 2, asa_leme_fecha[0][0]);
    glEnable(GL_MAP2_VERTEX_3);

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glPopMatrix();


    /**hélice*/
    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, helice_parte[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, helice_parte2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, helice_parte3[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, helice_parte4[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glPopMatrix();


    /**bico*/
    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 3, bico_parte1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, bico_parte2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 5, bico_parte3[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 5, bico_parte4[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 6, bico_parte5[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, bico_parte6[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 3, 0, 1, 9, 3, bico_parte7[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 2, 0, 1, 6, 3, bico_parte8[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glPopMatrix();

    /**janelas*/
    glPushMatrix();



    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_amesp);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_difesp);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specesp);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emiesp);


    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 5, janela_pt1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 5, janela_pt1_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 4, janela_pt2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, janela_pt2_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 6, janela_tra[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 5, janela_tra_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 6, janela_tra_pt2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 6, janela_tra_pt2_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, janela_meio[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, janela_meio_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, janela_frente[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 3, janela_frente_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glPopMatrix();

    /**asa*/
    glPushMatrix();
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);


    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 6, asa_pt1[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 6, asa_pt2[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 4, asa_pt3[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 4, asa_pt3_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 4, asa_pt4[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 4, asa_pt4_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 2, asa_pt5[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 6, 0, 1, 18, 2, asa_pt5_esp[0][0]);
    glEnable(GL_MAP2_VERTEX_3);
    // Draw the Bezier surface using a mesh approximation.

    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
    glEvalMesh2(GL_FILL, 0, 20, 0, 20);

    glPopMatrix();



    glColorMaterial(GL_FRONT, GL_DIFFUSE);
    glEnable(GL_COLOR_MATERIAL);

}

void ground(void)
{

    GLfloat mat_ambient[] = { 0.0, 1.0, 0.0, 1.0 };
    GLfloat mat_diffuse[] = { 0.0, 1.0, 0.0, 1.0 };
    GLfloat mat_specular[] = { 0.0, 1.0, 0.0, 1.0 };
    GLfloat high_shininess[] = { 100.0 };
    GLfloat mat_emission[] = {0.0, 0.0, 0.0, 1.0};

    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission);

    glutSolidCube(5);

    glColorMaterial(GL_FRONT, GL_DIFFUSE);
    glEnable(GL_COLOR_MATERIAL);

}

// Drawing routine.
void drawScene(void)
{

   // Light property vectors that change during runtime.
   float lightDifAndSpec[] = { d, d, d, 1.0 };
   float lightPos[] = { cos( (PI/180.0)*theta ), sin( (PI/180.0)*theta ), 0.0, 0.0 };

   // Light properties.
   glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
   glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDifAndSpec);
   glLightfv(GL_LIGHT0, GL_SPECULAR, lightDifAndSpec);

   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glShadeModel (GL_SMOOTH);

    glLoadIdentity();

    // Rotate scene.
    glRotatef(Zangle, 0.0, 0.0, 1.0);
    glRotatef(Yangle, 0.0, 1.0, 0.0);
    glRotatef(Xangle, 1.0, 0.0, 0.0);

    /**Detalhes*/

    glPushMatrix();
    glTranslatef(0,-2.75,0);
    glScalef(100,0.1,100);
    ground();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(15,0,0);
    glCallList(base+2);
    glPopMatrix();

    glPushMatrix();
    glRotatef(33,0,0,1);
    glRotatef(180,0,1,0);
    glTranslatef(-4.375,0,0);
    glTranslatef(x,y,0);
    glCallList(base+3);
    glPushMatrix();

    //glCallList(base+3);
    /**areas com movimento*/
    /**profundor pro*/
    glPushMatrix();
    glRotatef(push,0.0,0.0,1.0);
    flepe2();
    glPopMatrix();

    /**Leme*/
    glPushMatrix();
    glRotatef(leme2,0.0,1.0,0.0);
    leme1();
    glPopMatrix();
    /**flepe*/
    glPushMatrix();
    glRotatef(push,0.0,0.0,1.0);
    flepe1();
    glPopMatrix();
    glPushMatrix();
    glRotatef(angle, 1.0, 0.0, 0.0);
    glCallList(base+1);
    glRotatef(180, 1.0, 0.0, 0.0);
    glCallList(base+1);
    glPopMatrix();

    glPopMatrix();
    glutSwapBuffers();
}

void Redraw(void)
{
    x=0,y=0;
    glPushMatrix();
    glCallList(base+3);
    /**areas com movimento*/
    /**profundor pro*/
        glPushMatrix();
        glRotatef(push,0.0,0.0,1.0);
        flepe2();
        glPopMatrix();

    /**Leme*/
        glPushMatrix();
        glRotatef(leme2,0.0,1.0,0.0);
        leme1();
        glPopMatrix();
    /**flepe*/
        glPushMatrix();
        glRotatef(push,0.0,0.0,1.0);
        flepe1();
        glPopMatrix();
        glPushMatrix();
        glRotatef(angle, 1.0, 0.0, 0.0);
        glCallList(base+1);
        glRotatef(180, 1.0, 0.0, 0.0);
        glCallList(base+1);
        glPopMatrix();

    glPopMatrix();
    glutSwapBuffers();

}

// OpenGL window reshape routine.

void myReshape(int w, int h)
{
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= (h * 2))
        glOrtho (-10.0, 10.0, -7.0*((GLfloat)h*2)/(GLfloat)w,
                 7.0*((GLfloat)h*2)/(GLfloat)w, -14.0, 14.0);
    else
        glOrtho (-10.0*(GLfloat)w/((GLfloat)h*2),
                 10.0*(GLfloat)w/((GLfloat)h*2), -7.0, 7.0, -14.0, 14.0);
    glMatrixMode(GL_MODELVIEW);
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
    switch(key)
    {
    case 27:
        exit(0);
    case ' ':
        if (animateMode == 0) animateMode = 1;
        else    animateMode = 0;
        glutPostRedisplay();
        break;
    case 'x':
        Xangle += 5.0;
        if (Xangle > 360.0) Xangle -= 360.0;
        glutPostRedisplay();
        break;
    case 'X':
        Xangle -= 5.0;
        if (Xangle < 0.0) Xangle += 360.0;
        glutPostRedisplay();
        break;
    case 'y':
        Yangle += 5.0;
        if (Yangle > 360.0) Yangle -= 360.0;
        glutPostRedisplay();
        break;
    case 'Y':
        Yangle -= 5.0;
        if (Yangle < 0.0) Yangle += 360.0;
        glutPostRedisplay();
        break;
    case 'z':
        Zangle += 5.0;
        if (Zangle > 360.0) Zangle -= 360.0;
        glutPostRedisplay();
        break;
    case 'Z':
        Zangle -= 5.0;
        if (Zangle < 0.0) Zangle += 360.0;
        glutPostRedisplay();
        break;
    case 'a':
        a += 5.0,coun++;
        glutPostRedisplay();
        break;
    case 'r':
        animateMode = 0;
        coun = 0;
        Redraw();
        break;
    default:
        break;
    }
}

// Callback routine for non-ASCII key entry.
void specialKeyInput(int key, int x, int y)
{
    if (key == GLUT_KEY_LEFT)
    {
        leme2 -= 0.1;
    }
    if (key == GLUT_KEY_RIGHT)
    {
        leme2 += 0.1;
    }
    if (key == GLUT_KEY_DOWN)
    {
        push -= 0.1;
    }
    glutPostRedisplay();

    if (key == GLUT_KEY_UP)
    {
        push += 0.1;
    }
    glutPostRedisplay();
}


// Main routine.
int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(600, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow(argv[0]);
    myinit();
    setup();
    glutDisplayFunc(drawScene);

    glutReshapeFunc(myReshape);
    glutKeyboardFunc(keyInput);
    glutTimerFunc(10, animate, 1);
    glutSpecialFunc(specialKeyInput);
    glutMainLoop();

    return 0;
}
